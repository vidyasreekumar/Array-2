// Time Complexity : O(m*n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None

// Your code here along with comments explaining your approach
// For each cell in the board count the number of live neighbours for each cell
// To retain the original array make changes as live->dead = 2, dead->live = 3
// Change array back 3->1, 2->0

class Solution {
    public void gameOfLife(int[][] board) {
        // 8 neighbours of a cell
        int[][] dir = {{0,1}, {1,0}, {1,1}, {0,-1}, {-1,0}, {-1,-1}, {-1,1}, {1,-1}};
        int m = board.length;
        int n = board[0].length;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                int count = 0;
                // get the count of live neighbours
                for(int[] d : dir) {
                    int r = i + d[0];
                    int c = j + d[1];
                    if(r >= 0 && r < m && c >= 0 && c < n && (board[r][c] == 1 || board[r][c] == 2))
                        count++;
                }
                // Live cell changed to dead
                if(board[i][j] == 1) {
                    if(count < 2 || count > 3)
                        board[i][j] = 2;
                }
                // dead cell changed to live
                else {
                    if(count == 3)
                        board[i][j] = 3;
                }
            }
        }
        // change the values back to 0s and 1s
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == 2)
                    board[i][j] = 0;
                else if(board[i][j] == 3)
                    board[i][j] = 1;
            }
        }
    }
}